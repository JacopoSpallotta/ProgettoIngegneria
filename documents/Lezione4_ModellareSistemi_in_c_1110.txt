Lezione4_ModellareSistemi_in_c++_1110.txt

Nella lezione di oggi il prof spiegerà esempi e la struttra dei programmi
Tutte le macchine che vedremo e che dovremmo produrre 
si sviluppa una macchina a stati che progredisce all'interno di un while loop infinto (a meno di una condizione)

In parallelo dovrà essitere un tester che controlli la
correttezza del softwere inserendo input e analizzando
output e comportamento.

(TUTTE LE SPIEGAZIONI EFFETTUATE SU EXAMPLE 1000 FSM SEMPHORE)

Il progetto è bene che venga organizzato in 3 sottodirectory bin(eseguibili) src(sorgete) obj(oggetto)

A prescindere da come è fatto il progetto ci deve essere
un makefile: per gestire la compilazione delle funzioni
(una funzione per file)

MAKEFILE
sharp : commento
IDIR=; ODIR=; BDIR=; per gestire le directory dei progetti

Bisogna inserire anche i file .h con le lib per l'inclusione di postreSQL

Il makefile dovrebbe essere universale al più di necessità secifiche dei vostri progetti.

ogni progetto ha il suo makefile, e per la compilazione di 
sottoprogetti viene eseguito il makefile appropriato 
tramite chiamata dal supermakefile $(MAKE) [dirctory submakefile]

$(ODIR)/%.o %.cpp $(DEPS)
	$(CC) -c -o $@ $(OBJ) $< $(CFLAGS)
	genera il codice oggetto fornendogli filename 
	flags, compilatori.

.PHONY: clean <- regola per la pulizia della directory

clean rm -f $(ODIR)/*.o $(IDIR)/*~ core

per maggiori info su makefile lez 11/10/23


MAIN.CPP:

DIRETTIVA DI COMPILAZIONE
#if (DEBUG>0)
	setvbuf(...)
	setvbuf(...)
#endif
se la var DEBUG è maggiore di zero svuota lo stdout e lo stderr

esiste una variabile t che da il timestap del testing
Normalmente il log del programma andrà sul db
legato al timestamp.

Il tester deve generare tutti i possibili input
utlizzeremo i generatori random, normalmente 
un seed utile per generare input sempre casuali è il timestamp corrente.

seguono poi le print di logging in questo format:
"temestamp, gtime, elapsed_time, variable, value"


Inizializzazini di variabili di stato e timers segnati nel main.cpp nel seguente modo
/*init time*/
/*init namefile state*/

nella simulazione deve assicurarmi di eseguire il file 
in "faster then your time" per eseguire logging del
softwere ad una granularità superiore.

le chiamate alle sleep (micro_sleep(400)) sono bloccanti,
bloccano il processo chiamante e esegue il tread sleep
fino a terminazione.

PER SALVARSI UN SEED:
	myseed = (unsigned) time(NULL);
	basta salvarsi un timestamp in una variabile per 
	poi aggiungerlo nel log del processo.



MAIN.H:
contiene tutte le lib .h necessari.

direttiva preproc:
#ifndef nomefile
...
...
corpo
...
...
#endif
se il nomefile fornito esiste non aggiunge ciò che
ha nel suo corpo

firme di funzioni
definizione di namespace



GLOBAL.H
contiene le definizioni di variabili globali
definite come "extern" di base quindi non sono
allocate lì ma solo dichiarate, 
vengono allocate un sola volta nel global.cpp.
